// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using Persistencia;

#nullable disable

namespace Persistencia.Migrations
{
    [DbContext(typeof(IncidenceContext))]
    [Migration("20230829224715_InitialCreate")]
    partial class InitialCreate
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "7.0.10")
                .HasAnnotation("Relational:MaxIdentifierLength", 64);

            modelBuilder.Entity("Dominio.Address", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("Id_Address")
                        .HasAnnotation("MySql:ValueGenerationStrategy", MySqlValueGenerationStrategy.IdentityColumn);

                    b.Property<int?>("CityId")
                        .HasColumnType("int");

                    b.Property<int>("Id_CityA")
                        .HasColumnType("int");

                    b.Property<int>("Id_Pa")
                        .HasColumnType("int");

                    b.Property<string>("Neigborhood")
                        .IsRequired()
                        .HasMaxLength(200)
                        .HasColumnType("varchar")
                        .HasColumnName("Nameneigborhood");

                    b.Property<string>("NumberPlate")
                        .IsRequired()
                        .HasMaxLength(200)
                        .HasColumnType("varchar")
                        .HasColumnName("NumberPlate");

                    b.Property<string>("NumberVenereableWay")
                        .IsRequired()
                        .HasMaxLength(200)
                        .HasColumnType("varchar")
                        .HasColumnName("NameVenereableWay");

                    b.Property<string>("NumberWay")
                        .IsRequired()
                        .ValueGeneratedOnAdd()
                        .HasMaxLength(200)
                        .HasColumnType("varchar")
                        .HasColumnName("NumberWay")
                        .HasAnnotation("MySql:ValueGenerationStrategy", MySqlValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("QuadrantPrefix")
                        .IsRequired()
                        .HasMaxLength(200)
                        .HasColumnType("varchar")
                        .HasColumnName("QuadranPrefix");

                    b.Property<string>("TypeWay")
                        .IsRequired()
                        .HasMaxLength(200)
                        .HasColumnType("varchar")
                        .HasColumnName("TypeWay");

                    b.HasKey("Id");

                    b.HasIndex("CityId");

                    b.HasIndex("Id_Pa");

                    b.ToTable("addresses", (string)null);
                });

            modelBuilder.Entity("Dominio.Area", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("Id_Area")
                        .HasAnnotation("MySql:ValueGenerationStrategy", MySqlValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Description_Area")
                        .IsRequired()
                        .HasMaxLength(200)
                        .HasColumnType("varchar")
                        .HasColumnName("Descriptionarea");

                    b.Property<int?>("Id_AreaU")
                        .IsRequired()
                        .HasColumnType("int")
                        .HasColumnName("Namearea");

                    b.Property<int?>("Id_Description_Incidence")
                        .IsRequired()
                        .HasColumnType("int")
                        .HasColumnName("Id_desc_Incidence");

                    b.HasKey("Id");

                    b.ToTable("Areas", (string)null);
                });

            modelBuilder.Entity("Dominio.AreaUser", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("Id_Area_User")
                        .HasAnnotation("MySql:ValueGenerationStrategy", MySqlValueGenerationStrategy.IdentityColumn);

                    b.Property<int>("Id_Area")
                        .HasColumnType("int");

                    b.Property<int>("Id_User")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("Id_Area");

                    b.HasIndex("Id_User");

                    b.ToTable("AreaUser", (string)null);
                });

            modelBuilder.Entity("Dominio.CategoryContact", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("Id_CategoryContact")
                        .HasAnnotation("MySql:ValueGenerationStrategy", MySqlValueGenerationStrategy.IdentityColumn);

                    b.Property<int?>("ContactId")
                        .HasColumnType("int");

                    b.Property<int>("Id_Category")
                        .HasColumnType("int")
                        .HasColumnName("Id_Category");

                    b.Property<string>("Name_CategoryContact")
                        .IsRequired()
                        .HasMaxLength(200)
                        .HasColumnType("varchar")
                        .HasColumnName("Name_CategoryContact");

                    b.HasKey("Id");

                    b.HasIndex("ContactId");

                    b.ToTable("CategoryContact", (string)null);
                });

            modelBuilder.Entity("Dominio.City", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("Id_City")
                        .HasAnnotation("MySql:ValueGenerationStrategy", MySqlValueGenerationStrategy.IdentityColumn);

                    b.Property<int?>("Id_Region")
                        .HasColumnType("int");

                    b.Property<string>("NameCity")
                        .IsRequired()
                        .HasMaxLength(200)
                        .HasColumnType("varchar")
                        .HasColumnName("NameCity");

                    b.HasKey("Id");

                    b.HasIndex("Id_Region");

                    b.ToTable("cities", (string)null);
                });

            modelBuilder.Entity("Dominio.Contact", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("Id_Contact")
                        .HasAnnotation("MySql:ValueGenerationStrategy", MySqlValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Description_Contact")
                        .IsRequired()
                        .HasMaxLength(200)
                        .HasColumnType("varchar")
                        .HasColumnName("Description_Contact");

                    b.Property<int>("Id_CategoryContact")
                        .HasColumnType("int")
                        .HasColumnName("Category_Contact");

                    b.Property<int>("Id_TypeCon")
                        .HasColumnType("int")
                        .HasColumnName("Type_Contact");

                    b.Property<int>("Id_User")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("Id_CategoryContact");

                    b.HasIndex("Id_TypeCon");

                    b.HasIndex("Id_User");

                    b.ToTable("Contact", (string)null);
                });

            modelBuilder.Entity("Dominio.ContactType", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("Id_ContactType")
                        .HasAnnotation("MySql:ValueGenerationStrategy", MySqlValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Description_ContactType")
                        .IsRequired()
                        .HasMaxLength(200)
                        .HasColumnType("varchar")
                        .HasColumnName("Description_ContactType");

                    b.Property<string>("Name_Contact")
                        .IsRequired()
                        .HasMaxLength(200)
                        .HasColumnType("varchar")
                        .HasColumnName("NameContact");

                    b.HasKey("Id");

                    b.ToTable("ContactType", (string)null);
                });

            modelBuilder.Entity("Dominio.Country", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("IdPais")
                        .HasAnnotation("MySql:ValueGenerationStrategy", MySqlValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("NameCountry")
                        .IsRequired()
                        .HasMaxLength(200)
                        .HasColumnType("varchar")
                        .HasColumnName("NombrePais");

                    b.HasKey("Id");

                    b.ToTable("countries", (string)null);
                });

            modelBuilder.Entity("Dominio.DetailIncidence", b =>
                {
                    b.Property<int>("Id")
                        .HasColumnType("int")
                        .HasColumnName("Id_DetailIncidence")
                        .HasAnnotation("MySql:ValueGenerationStrategy", MySqlValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Description_DetailIncidence")
                        .IsRequired()
                        .HasMaxLength(200)
                        .HasColumnType("varchar")
                        .HasColumnName("Nameneigborhood");

                    b.Property<int>("Id_LevelIncidence")
                        .HasColumnType("int")
                        .HasColumnName("Id_LevelIncidence");

                    b.Property<int>("Id_Peripheral")
                        .HasColumnType("int")
                        .HasColumnName("Id_Peripheral");

                    b.Property<int>("Id_State")
                        .HasColumnType("int")
                        .HasColumnName("Id_State");

                    b.Property<int>("Id_TypeIncidence")
                        .HasColumnType("int")
                        .HasColumnName("Id_TypeIncidence");

                    b.HasKey("Id");

                    b.HasIndex("Id_LevelIncidence");

                    b.HasIndex("Id_State");

                    b.HasIndex("Id_TypeIncidence");

                    b.ToTable("DetailIncidence", (string)null);
                });

            modelBuilder.Entity("Dominio.DocumentType", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("Id_DocumentType")
                        .HasAnnotation("MySql:ValueGenerationStrategy", MySqlValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Abbreviation_DocumentType")
                        .IsRequired()
                        .HasMaxLength(10)
                        .HasColumnType("varchar")
                        .HasColumnName("AbreviationDocumentTye");

                    b.Property<int?>("ContactId")
                        .HasColumnType("int");

                    b.Property<string>("Name_DocumentType")
                        .IsRequired()
                        .HasMaxLength(200)
                        .HasColumnType("varchar")
                        .HasColumnName("NameDocumentType");

                    b.HasKey("Id");

                    b.HasIndex("ContactId");

                    b.ToTable("DocumentType", (string)null);
                });

            modelBuilder.Entity("Dominio.Incidence", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("Id_Incidence")
                        .HasAnnotation("MySql:ValueGenerationStrategy", MySqlValueGenerationStrategy.IdentityColumn);

                    b.Property<DateTime>("Date")
                        .HasColumnType("Date")
                        .HasColumnName("DateIncidence");

                    b.Property<string>("Description_Incidence")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("varchar")
                        .HasColumnName("DescriptionIncidence");

                    b.Property<string>("Detail_Incidence")
                        .HasColumnType("longtext");

                    b.Property<int>("Id_Area")
                        .HasColumnType("int")
                        .HasColumnName("Id_Area");

                    b.Property<int>("Id_Place")
                        .HasColumnType("int")
                        .HasColumnName("Id_Place");

                    b.Property<int>("Id_State")
                        .HasColumnType("int")
                        .HasColumnName("Id_State");

                    b.Property<int>("Id_User")
                        .HasColumnType("int")
                        .HasColumnName("Id_User");

                    b.Property<int?>("PlaceId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("Id_Area");

                    b.HasIndex("Id_State");

                    b.HasIndex("Id_User");

                    b.HasIndex("PlaceId");

                    b.ToTable("Incidence", (string)null);
                });

            modelBuilder.Entity("Dominio.LevelIncidence", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("Id_LevelIncidence")
                        .HasAnnotation("MySql:ValueGenerationStrategy", MySqlValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Description_LevelIncidence")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("varchar")
                        .HasColumnName("Description_LevelIcidence");

                    b.Property<string>("Name_LevelIncidence")
                        .IsRequired()
                        .HasMaxLength(80)
                        .HasColumnType("varchar")
                        .HasColumnName("Name_LevelIncidence");

                    b.HasKey("Id");

                    b.ToTable("LevelIncidence", (string)null);
                });

            modelBuilder.Entity("Dominio.Peripheral", b =>
                {
                    b.Property<int>("Id")
                        .HasColumnType("int")
                        .HasColumnName("Id_Peripheral")
                        .HasAnnotation("MySql:ValueGenerationStrategy", MySqlValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Name_Peripheral")
                        .IsRequired()
                        .HasMaxLength(120)
                        .HasColumnType("varchar")
                        .HasColumnName("NamenePeripheral");

                    b.HasKey("Id");

                    b.ToTable("Peripheral", (string)null);
                });

            modelBuilder.Entity("Dominio.Place", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("Id_Place")
                        .HasAnnotation("MySql:ValueGenerationStrategy", MySqlValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Description_Place")
                        .IsRequired()
                        .HasMaxLength(200)
                        .HasColumnType("varchar")
                        .HasColumnName("DescriptionPlace");

                    b.Property<int?>("Id_AreaOrigin")
                        .IsRequired()
                        .HasColumnType("int");

                    b.Property<string>("Name_Place")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("varchar")
                        .HasColumnName("NamePlace");

                    b.HasKey("Id");

                    b.HasIndex("Id_AreaOrigin");

                    b.ToTable("Place", (string)null);
                });

            modelBuilder.Entity("Dominio.Region", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("Id_Region")
                        .HasAnnotation("MySql:ValueGenerationStrategy", MySqlValueGenerationStrategy.IdentityColumn);

                    b.Property<int>("Id_Pais")
                        .HasColumnType("int");

                    b.Property<string>("NameRegion")
                        .IsRequired()
                        .HasMaxLength(200)
                        .HasColumnType("varchar")
                        .HasColumnName("NombreRegion");

                    b.HasKey("Id");

                    b.HasIndex("Id_Pais");

                    b.ToTable("regions", (string)null);
                });

            modelBuilder.Entity("Dominio.Rol", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("Id_Rol")
                        .HasAnnotation("MySql:ValueGenerationStrategy", MySqlValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Description_Rol")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("varchar")
                        .HasColumnName("descRol");

                    b.Property<string>("Name_Rol")
                        .IsRequired()
                        .HasMaxLength(200)
                        .HasColumnType("varchar")
                        .HasColumnName("NameRol");

                    b.HasKey("Id");

                    b.ToTable("Rol", (string)null);
                });

            modelBuilder.Entity("Dominio.State", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("Id_State")
                        .HasAnnotation("MySql:ValueGenerationStrategy", MySqlValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Description_State")
                        .IsRequired()
                        .HasMaxLength(200)
                        .HasColumnType("varchar")
                        .HasColumnName("Description_State");

                    b.Property<int?>("DetailIncidenceId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("DetailIncidenceId");

                    b.ToTable("State", (string)null);
                });

            modelBuilder.Entity("Dominio.TypeIncidence", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("Id_TypeIncidence")
                        .HasAnnotation("MySql:ValueGenerationStrategy", MySqlValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Description_TypeIncidence")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("varchar")
                        .HasColumnName("DescroptionTypeIncidence");

                    b.Property<string>("Name_TypeIncidence")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("varchar")
                        .HasColumnName("NameTypeIncidence");

                    b.HasKey("Id");

                    b.ToTable("TypeIncidence", (string)null);
                });

            modelBuilder.Entity("Dominio.User", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("Id_User")
                        .HasAnnotation("MySql:ValueGenerationStrategy", MySqlValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasMaxLength(150)
                        .HasColumnType("varchar")
                        .HasColumnName("Email");

                    b.Property<int>("Id_DocumentType")
                        .HasColumnType("int")
                        .HasColumnName("Id_DocumentType");

                    b.Property<int>("Id_Rol")
                        .HasColumnType("int");

                    b.Property<string>("Lastname_User")
                        .IsRequired()
                        .HasMaxLength(150)
                        .HasColumnType("varchar")
                        .HasColumnName("LastNameUser");

                    b.Property<string>("Name_User")
                        .IsRequired()
                        .HasMaxLength(150)
                        .HasColumnType("varchar")
                        .HasColumnName("NameUser");

                    b.Property<string>("Password")
                        .IsRequired()
                        .HasMaxLength(150)
                        .HasColumnType("varchar")
                        .HasColumnName("Password");

                    b.HasKey("Id");

                    b.HasIndex("Id_DocumentType");

                    b.HasIndex("Name_User", "Email")
                        .IsUnique()
                        .HasDatabaseName("IX-MiIndice");

                    b.ToTable("User", (string)null);
                });

            modelBuilder.Entity("Dominio.UserRol", b =>
                {
                    b.Property<int>("UserId")
                        .HasColumnType("int");

                    b.Property<int>("RolId")
                        .HasColumnType("int");

                    b.HasKey("UserId", "RolId");

                    b.HasIndex("RolId");

                    b.ToTable("UserRol");
                });

            modelBuilder.Entity("Dominio.Address", b =>
                {
                    b.HasOne("Dominio.City", "City")
                        .WithMany("Addresses")
                        .HasForeignKey("CityId");

                    b.HasOne("Dominio.User", "User")
                        .WithMany("Addresses")
                        .HasForeignKey("Id_Pa")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("City");

                    b.Navigation("User");
                });

            modelBuilder.Entity("Dominio.AreaUser", b =>
                {
                    b.HasOne("Dominio.Area", "Area")
                        .WithMany("AreaUsers")
                        .HasForeignKey("Id_Area")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Dominio.User", "User")
                        .WithMany("AreaUsers")
                        .HasForeignKey("Id_User")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Area");

                    b.Navigation("User");
                });

            modelBuilder.Entity("Dominio.CategoryContact", b =>
                {
                    b.HasOne("Dominio.Contact", "Contact")
                        .WithMany()
                        .HasForeignKey("ContactId");

                    b.Navigation("Contact");
                });

            modelBuilder.Entity("Dominio.City", b =>
                {
                    b.HasOne("Dominio.Region", "Region")
                        .WithMany("Cities")
                        .HasForeignKey("Id_Region");

                    b.Navigation("Region");
                });

            modelBuilder.Entity("Dominio.Contact", b =>
                {
                    b.HasOne("Dominio.CategoryContact", "CategoryContact")
                        .WithMany("Contacts")
                        .HasForeignKey("Id_CategoryContact")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Dominio.ContactType", "TypeOfContact")
                        .WithMany("Contacts")
                        .HasForeignKey("Id_TypeCon")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Dominio.User", "User")
                        .WithMany("Contacts")
                        .HasForeignKey("Id_User")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("CategoryContact");

                    b.Navigation("TypeOfContact");

                    b.Navigation("User");
                });

            modelBuilder.Entity("Dominio.DetailIncidence", b =>
                {
                    b.HasOne("Dominio.Incidence", "Incidence")
                        .WithMany("DetailIncidences")
                        .HasForeignKey("Id")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Dominio.LevelIncidence", "LevelOfIncidence")
                        .WithMany("DetailIncidences")
                        .HasForeignKey("Id_LevelIncidence")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Dominio.State", "State")
                        .WithMany("DetailIncidences")
                        .HasForeignKey("Id_State")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Dominio.TypeIncidence", "TypeIncidence")
                        .WithMany("DetailIncidences")
                        .HasForeignKey("Id_TypeIncidence")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Incidence");

                    b.Navigation("LevelOfIncidence");

                    b.Navigation("State");

                    b.Navigation("TypeIncidence");
                });

            modelBuilder.Entity("Dominio.DocumentType", b =>
                {
                    b.HasOne("Dominio.Contact", "Contact")
                        .WithMany()
                        .HasForeignKey("ContactId");

                    b.Navigation("Contact");
                });

            modelBuilder.Entity("Dominio.Incidence", b =>
                {
                    b.HasOne("Dominio.Area", "Area")
                        .WithMany("Incidences")
                        .HasForeignKey("Id_Area")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Dominio.State", "State")
                        .WithMany("Incidences")
                        .HasForeignKey("Id_State")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Dominio.User", "User")
                        .WithMany("Incidences")
                        .HasForeignKey("Id_User")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Dominio.Place", "Place")
                        .WithMany("Incidences")
                        .HasForeignKey("PlaceId");

                    b.Navigation("Area");

                    b.Navigation("Place");

                    b.Navigation("State");

                    b.Navigation("User");
                });

            modelBuilder.Entity("Dominio.Peripheral", b =>
                {
                    b.HasOne("Dominio.DetailIncidence", "DetailIncidence")
                        .WithMany("Peripherals")
                        .HasForeignKey("Id")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("DetailIncidence");
                });

            modelBuilder.Entity("Dominio.Place", b =>
                {
                    b.HasOne("Dominio.Area", "Area")
                        .WithMany("Places")
                        .HasForeignKey("Id_AreaOrigin")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Area");
                });

            modelBuilder.Entity("Dominio.Region", b =>
                {
                    b.HasOne("Dominio.Country", "Country")
                        .WithMany("Regions")
                        .HasForeignKey("Id_Pais")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Country");
                });

            modelBuilder.Entity("Dominio.State", b =>
                {
                    b.HasOne("Dominio.DetailIncidence", "DetailIncidence")
                        .WithMany()
                        .HasForeignKey("DetailIncidenceId");

                    b.Navigation("DetailIncidence");
                });

            modelBuilder.Entity("Dominio.User", b =>
                {
                    b.HasOne("Dominio.DocumentType", "DocumentType")
                        .WithMany("Users")
                        .HasForeignKey("Id_DocumentType")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("DocumentType");
                });

            modelBuilder.Entity("Dominio.UserRol", b =>
                {
                    b.HasOne("Dominio.Rol", "Rol")
                        .WithMany("UserRols")
                        .HasForeignKey("RolId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Dominio.User", "User")
                        .WithMany("UserRols")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Rol");

                    b.Navigation("User");
                });

            modelBuilder.Entity("Dominio.Area", b =>
                {
                    b.Navigation("AreaUsers");

                    b.Navigation("Incidences");

                    b.Navigation("Places");
                });

            modelBuilder.Entity("Dominio.CategoryContact", b =>
                {
                    b.Navigation("Contacts");
                });

            modelBuilder.Entity("Dominio.City", b =>
                {
                    b.Navigation("Addresses");
                });

            modelBuilder.Entity("Dominio.ContactType", b =>
                {
                    b.Navigation("Contacts");
                });

            modelBuilder.Entity("Dominio.Country", b =>
                {
                    b.Navigation("Regions");
                });

            modelBuilder.Entity("Dominio.DetailIncidence", b =>
                {
                    b.Navigation("Peripherals");
                });

            modelBuilder.Entity("Dominio.DocumentType", b =>
                {
                    b.Navigation("Users");
                });

            modelBuilder.Entity("Dominio.Incidence", b =>
                {
                    b.Navigation("DetailIncidences");
                });

            modelBuilder.Entity("Dominio.LevelIncidence", b =>
                {
                    b.Navigation("DetailIncidences");
                });

            modelBuilder.Entity("Dominio.Place", b =>
                {
                    b.Navigation("Incidences");
                });

            modelBuilder.Entity("Dominio.Region", b =>
                {
                    b.Navigation("Cities");
                });

            modelBuilder.Entity("Dominio.Rol", b =>
                {
                    b.Navigation("UserRols");
                });

            modelBuilder.Entity("Dominio.State", b =>
                {
                    b.Navigation("DetailIncidences");

                    b.Navigation("Incidences");
                });

            modelBuilder.Entity("Dominio.TypeIncidence", b =>
                {
                    b.Navigation("DetailIncidences");
                });

            modelBuilder.Entity("Dominio.User", b =>
                {
                    b.Navigation("Addresses");

                    b.Navigation("AreaUsers");

                    b.Navigation("Contacts");

                    b.Navigation("Incidences");

                    b.Navigation("UserRols");
                });
#pragma warning restore 612, 618
        }
    }
}
